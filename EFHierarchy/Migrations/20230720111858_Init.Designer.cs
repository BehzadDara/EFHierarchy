// <auto-generated />
using EFHierarchy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFHierarchy.Migrations
{
    [DbContext(typeof(EFHierarchyDBContext))]
    [Migration("20230720111858_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("TPCChild1Sequence");

            modelBuilder.HasSequence("TPCChild2Sequence");

            modelBuilder.Entity("EFHierarchy.Models.TPCChild1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [TPCChild1Sequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("TPCChild1Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TPCParentField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TPCChild1");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("EFHierarchy.Models.TPCChild2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [TPCChild2Sequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("TPCChild2Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TPCParentField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TPCChild2");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("EFHierarchy.Models.TPHParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TPHParentField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TPHParent");

                    b.HasDiscriminator<string>("Type").HasValue("Parent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFHierarchy.Models.TPTParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TPTParentField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TPTParent");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EFHierarchy.Models.TPHChild1", b =>
                {
                    b.HasBaseType("EFHierarchy.Models.TPHParent");

                    b.Property<string>("TPHChild1Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Child1");
                });

            modelBuilder.Entity("EFHierarchy.Models.TPHChild2", b =>
                {
                    b.HasBaseType("EFHierarchy.Models.TPHParent");

                    b.Property<string>("TPHChild2Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Child2");
                });

            modelBuilder.Entity("EFHierarchy.Models.TPTChild1", b =>
                {
                    b.HasBaseType("EFHierarchy.Models.TPTParent");

                    b.Property<string>("TPTChild1Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TPTChild1", (string)null);
                });

            modelBuilder.Entity("EFHierarchy.Models.TPTChild2", b =>
                {
                    b.HasBaseType("EFHierarchy.Models.TPTParent");

                    b.Property<string>("TPTChild2Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TPTChild2", (string)null);
                });

            modelBuilder.Entity("EFHierarchy.Models.TPTChild1", b =>
                {
                    b.HasOne("EFHierarchy.Models.TPTParent", null)
                        .WithOne()
                        .HasForeignKey("EFHierarchy.Models.TPTChild1", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFHierarchy.Models.TPTChild2", b =>
                {
                    b.HasOne("EFHierarchy.Models.TPTParent", null)
                        .WithOne()
                        .HasForeignKey("EFHierarchy.Models.TPTChild2", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
